{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-14T13:20:32.606Z",
    "end": "2024-08-14T13:20:34.039Z",
    "duration": 1433,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "26317a82-3e63-4241-a41f-fe96d0416a85",
      "title": "",
      "fullFile": "C:\\Users\\hendr\\OneDrive\\Desktop\\API-Automation-DS\\test\\Test-regresin.js",
      "file": "\\test\\Test-regresin.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77b435a4-c52e-4201-bd55-775824e2a795",
          "title": "API TEST for \"Regres.in\"",
          "fullFile": "C:\\Users\\hendr\\OneDrive\\Desktop\\API-Automation-DS\\test\\Test-regresin.js",
          "file": "\\test\\Test-regresin.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test - GET User",
              "fullTitle": "API TEST for \"Regres.in\" Test - GET User",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(UrlBase)\n.get('users?page=2');\n//kode untuk assert\nassert.equal(res.statusCode, 200)\nassert.equal(res.body.page, '2')\nassert.equal(res.body.data[0].first_name, 'Michael')\nconst schemaPath = \"resources/jsonSchema/GET-Users-Schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(res.body, jsonSchema)",
              "err": {},
              "uuid": "613fd297-de9b-436c-b6f8-3c97939fb35b",
              "parentUUID": "77b435a4-c52e-4201-bd55-775824e2a795",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - Post User",
              "fullTitle": "API TEST for \"Regres.in\" Test - Post User",
              "timedOut": false,
              "duration": 451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const CreateUser = {\n    \"name\": \"Hendro Elyeser Lumombo\",\n    \"job\": \"Quality Assurance\"\n}\nconst res = await request(UrlBase)\n.post('users')\n.send(CreateUser);\nconsole.log(res.body)\n//kode assert POST\nconst schemaPath = \"resources/jsonSchema/POST-Users-Schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(res.body, jsonSchema)",
              "err": {},
              "uuid": "1a515481-6a20-4b56-bbaa-1210922e0413",
              "parentUUID": "77b435a4-c52e-4201-bd55-775824e2a795",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - DELETE User",
              "fullTitle": "API TEST for \"Regres.in\" Test - DELETE User",
              "timedOut": false,
              "duration": 432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(UrlBase)\n.delete('users/2')\n//kode assert DELETE\nassert.equal(res.statusCode, 204)",
              "err": {},
              "uuid": "102314ca-82a7-4cc2-8356-0db4b511ede4",
              "parentUUID": "77b435a4-c52e-4201-bd55-775824e2a795",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - PUT User",
              "fullTitle": "API TEST for \"Regres.in\" Test - PUT User",
              "timedOut": false,
              "duration": 427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UpdateUser = {\n    \"name\": \"Bunga\",\n    \"job\": \"Senior Quality Assurance\"\n}\nconst res = await request(UrlBase)\n.put('users/2')\n.send(UpdateUser);\nconsole.log(res.body)\n//kode assert PUT\nassert.equal(res.statusCode, 200)\nassert.equal(res.body.name, 'Bunga')\nassert.equal(res.body.job, 'Senior Quality Assurance')\nconst schemaPath = \"resources/jsonSchema/PUT-Users-Schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(res.body, jsonSchema)",
              "err": {},
              "uuid": "b6fa97f5-b8cb-41d8-a1be-dc6575bf4b04",
              "parentUUID": "77b435a4-c52e-4201-bd55-775824e2a795",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "613fd297-de9b-436c-b6f8-3c97939fb35b",
            "1a515481-6a20-4b56-bbaa-1210922e0413",
            "102314ca-82a7-4cc2-8356-0db4b511ede4",
            "b6fa97f5-b8cb-41d8-a1be-dc6575bf4b04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1425,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}